<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础篇 on Blog</title>
    <link>https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
    <description>Recent content in 基础篇 on Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP/IP网络模型有哪几层？</title>
      <link>https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/tcp_ip%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%93%AA%E5%87%A0%E5%B1%82/</link>
      <pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/tcp_ip%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%93%AA%E5%87%A0%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;tcpip网络模型有哪几层&#34;&gt;&#xD;&#xA;  TCP/IP网络模型有哪几层？&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tcpip%e7%bd%91%e7%bb%9c%e6%a8%a1%e5%9e%8b%e6%9c%89%e5%93%aa%e5%87%a0%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;1-应用层&#34;&gt;&#xD;&#xA;  1. 应用层&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%ba%94%e7%94%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;最上层的，也是我们能直接接触到的就是&lt;strong&gt;应用层&lt;/strong&gt;（&lt;em&gt;Application Layer&lt;/em&gt;）,应用层只需要专注于为用户提供应用功能，比如 HTTP、FTP、Telnet、DNS、SMTP等。应用层是不用去关心数据是如何传输的,应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-传输层&#34;&gt;&#xD;&#xA;  2. 传输层&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%bc%a0%e8%be%93%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;应用层的数据包会传给传输层，&lt;strong&gt;传输层&lt;/strong&gt;（&lt;em&gt;Transport Layer&lt;/em&gt;）是为应用层提供网络支持的。&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;script src=&#34;https://xiaoli-lhx.github.io/mermaid.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;mermaid.initialize({&#xD;&#xA;  &#34;flowchart&#34;: {&#xD;&#xA;    &#34;useMaxWidth&#34;:true&#xD;&#xA;  },&#xD;&#xA;  &#34;theme&#34;: &#34;default&#34;&#xD;&#xA;}&#xD;&#xA;)&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;flowchart BT&#xD;&#xA;    传输层--&amp;gt;应用层A&#xD;&#xA;&#x9;传输层--&amp;gt;应用层B&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;在传输层会有两个传输协议，分别是 &lt;code&gt;TCP&lt;/code&gt;和&lt;code&gt; UDP&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;TCP 的全称叫传输控制协议,TCP比&lt;code&gt;UDP&lt;/code&gt;多了很多特性，比如流量控制，超时重传，拥塞控制等,这些都是为了保证数据包能可靠的传输给对方。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;UDP&lt;/code&gt;相对来说很简单，简单到只负责发送数据包，不保证数据包能抵达对方，但他的实时性相对更好，传输效率也高&lt;/p&gt;&#xA;&lt;p&gt;当传输层的数据包大小超过&lt;code&gt;MSS&lt;/code&gt;(TCP 最大报文段长度)，就需要将数据包分块，这样即使中途有一个分块丢失或者损坏，只需要重新发送这一个分块，而不需要发送整个数据包。在TCP协议中，我们把每个分块成为一个TCP段&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;端口&lt;/strong&gt;：当设备作为接收方时，传输层则要负责把数据包传给应用，但一台设备可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用去分开来，这个编号就是端口。&lt;/p&gt;&#xA;&lt;p&gt;由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-网络层&#34;&gt;&#xD;&#xA;  3. 网络层&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e7%bd%91%e7%bb%9c%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;flowchart BT&#xD;&#xA;    网络层--&amp;gt;传输层A--&amp;gt;应用层A&#xD;&#xA;&#x9;网络层--&amp;gt;传输层B--&amp;gt;应用层B&lt;/pre&gt;&#xD;&#xA;&lt;p&gt;网络层最常使用的时IP协议，IP协议会将传输层的报文作为数据部分，再加上IP报头组成IP报文，如果IP报文大小超过MTU（以太网中一般为1500字节）就会再次进行分片，得到一个即将发送到网络的IP报文。&lt;/p&gt;&#xA;&lt;p&gt;网络层负责将数据从一个设备传输到另一个设备。&lt;/p&gt;&#xA;&lt;p&gt;需要将 IP 地址分成两种意义：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个是&lt;strong&gt;网络号&lt;/strong&gt;，负责标识该 IP 地址是属于哪个「子网」的；&lt;/li&gt;&#xA;&lt;li&gt;一个是&lt;strong&gt;主机号&lt;/strong&gt;，负责标识同一「子网」下的不同主机；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这需要配合&lt;strong&gt;子网掩码&lt;/strong&gt;才能算出 IP 地址 的网络号和主机号。&lt;/p&gt;&#xA;&lt;p&gt;将IP地址与子网掩码&lt;strong&gt;按位与运算&lt;/strong&gt;，就可以得到网络号。&lt;/p&gt;&#xA;&lt;p&gt;将子网掩码取反后与IP地址进行进行&lt;strong&gt;按位与运算&lt;/strong&gt;，就可以得到主机号。&lt;/p&gt;&#xA;&lt;p&gt;在寻址的过程中，先匹配到相同的网络号（表示要找到同一个子网），才会去找对应的主机。&lt;/p&gt;&#xA;&lt;p&gt;除了寻址能力， IP 协议还有另一个重要的能力就是&lt;strong&gt;路由&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;路由器寻址工作中，就是要找到目标地址的子网，找到后进而把数据包转发给对应的网络内。&lt;/p&gt;&#xA;&lt;p&gt;所以，IP协议的寻址作用是告诉我们去往下一个目的地该往哪个方向走，路由则是根据下一个目的地选择路径。寻址更像在导航，路由更像在操作方向盘。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-网络接口层&#34;&gt;&#xD;&#xA;  4. 网络接口层&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e7%bd%91%e7%bb%9c%e6%8e%a5%e5%8f%a3%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;生成了 IP 头部之后，接下来要交给网络接口层,在 IP 头部的前面加上 MAC 头部，并封装成数据帧（Data frame）发送到网络上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在浏览器中输入URL并按下回车之和会发生什么</title>
      <link>https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/url_about/</link>
      <pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://xiaoli-lhx.github.io/%E8%AE%A1%E7%BD%91/%E5%9F%BA%E7%A1%80%E7%AF%87/url_about/</guid>
      <description>&lt;h1 id=&#34;在浏览器中输入url并按下回车之和会发生什么&#34;&gt;&#xD;&#xA;  在浏览器中输入URL并按下回车之和会发生什么&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e4%b8%ad%e8%be%93%e5%85%a5url%e5%b9%b6%e6%8c%89%e4%b8%8b%e5%9b%9e%e8%bd%a6%e4%b9%8b%e5%92%8c%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;1-输入url并解析&#34;&gt;&#xD;&#xA;  1. 输入URL并解析&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%be%93%e5%85%a5url%e5%b9%b6%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;输入&lt;code&gt;URL&lt;/code&gt;后，浏览器会解析出协议、主机、端口、路径等信息，并构造一个HTTP请求（浏览器会根据请求头判断是否有&lt;code&gt;HTTP缓存&lt;/code&gt;，并根据是否有缓存决定是从服务器获取资源还是使用缓存资源）&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-dns域名解析将域名解析成对应的ip地址&#34;&gt;&#xD;&#xA;  2. DNS域名解析，将域名解析成对应的IP地址&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-dns%e5%9f%9f%e5%90%8d%e8%a7%a3%e6%9e%90%e5%b0%86%e5%9f%9f%e5%90%8d%e8%a7%a3%e6%9e%90%e6%88%90%e5%af%b9%e5%ba%94%e7%9a%84ip%e5%9c%b0%e5%9d%80&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;在发送HTTP请求之前，浏览器需要知道想要访问网页对应的IP地址，这就需要使用到&lt;code&gt;DNS域名解析&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-建立起tcp连接之三次握手&#34;&gt;&#xD;&#xA;  3. 建立起TCP连接之三次握手&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%bb%ba%e7%ab%8b%e8%b5%b7tcp%e8%bf%9e%e6%8e%a5%e4%b9%8b%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;这里可以拓展很多，比如为什么是三次，不是两次、四次？如果第一次握手丢失了会发生什么？三次握手过程中可以携带数据吗？&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;客户端和服务器之间进行HTTP请求和HTTP响应的过程中，需要建立起TCP连接，TCP连接需要进行三次握手&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-浏览器发送httphttps请求到web服务器&#34;&gt;&#xD;&#xA;  4. 浏览器发送HTTP/HTTPS请求到web服务器&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%b5%8f%e8%a7%88%e5%99%a8%e5%8f%91%e9%80%81httphttps%e8%af%b7%e6%b1%82%e5%88%b0web%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;扩展问题比如HTTP/HTTPS的区别？请求的方式？请求的状态码等和HTTP请求的问题&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;5-服务器处理http请求并返回http报文&#34;&gt;&#xD;&#xA;  5. 服务器处理HTTP请求并返回HTTP报文&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%a4%84%e7%90%86http%e8%af%b7%e6%b1%82%e5%b9%b6%e8%bf%94%e5%9b%9ehttp%e6%8a%a5%e6%96%87&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;服务器会接受请求并将其传递给请求处理程序并发送HTTP响应，一般响应报文包含：请求的网页以及状态码，压缩类型，如何缓存的页面，设置的cookie；&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-浏览器渲染页面&#34;&gt;&#xD;&#xA;  6. 浏览器渲染页面&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e6%b5%8f%e8%a7%88%e5%99%a8%e6%b8%b2%e6%9f%93%e9%a1%b5%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h2 id=&#34;7-断开连接之tcp四次挥手&#34;&gt;&#xD;&#xA;  7. 断开连接之TCP四次挥手&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e6%96%ad%e5%bc%80%e8%bf%9e%e6%8e%a5%e4%b9%8btcp%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;四次挥手的过程，为什么是四次？&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;客户端和服务器之间断开连接需要进行四次挥手&lt;/p&gt;&#xA;&lt;h1 id=&#34;dns&#34;&gt;&#xD;&#xA;  DNS&#xD;&#xA;  &#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dns&#34;&gt;#&lt;/a&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/h1&gt;</description>
    </item>
  </channel>
</rss>
